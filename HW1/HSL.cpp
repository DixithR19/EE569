// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>#include <algorithm>#include <math.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size1;	int Size2;	// Check for proper syntax	if (argc < 3) {		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image1.raw output_image2.raw output_image3.raw [BytesPerPixel] [Size1] [Size2]" << endl;		return 0;	}	// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[5]);		// Check if size is specified		if (argc >= 5) {			Size1 = atoi(argv[6]);			Size2 = atoi(argv[7]);		}	}	// Allocate image data array	unsigned char Imagedata[Size1][Size2][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file = fopen(argv[1], "rb"))) {		cout << "Cannot open file: " << argv[1] << endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	float Sat;	double Hue;	double b;	double g;	double r;	//unsigned char M_temp;	//unsigned char m_temp;	unsigned char HImage[Size1][Size2];	unsigned char SImage[Size1][Size2];	unsigned char LImage[Size1][Size2];	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			r = (double)Imagedata[i][j][0] / 255;			g = (double)Imagedata[i][j][1] / 255;			b = (double)Imagedata[i][j][2] / 255;						double M = max(r, max(g,b));						//cout << "M:" << M << endl;						double m = min(r, min(g,b));			//m /= 255;			//cout << "m:" << m << endl;			double C = M - m;			double Lum = (M + m) / 2;			//cout << "Lum:" << Lum << endl;			if (C == 0) {				Hue = 0;				Sat = 0;			}			if (Lum > 0 && Lum < 0.5) {				Sat = C / (2 * Lum);			}			else {				Sat = C / (2 - (2 * Lum));			}						//cout << (double)Imagedata[0][0][2] / 255 << endl;			//cout<< r << endl;			if (M == r) {								Hue = 60 * (fmod(((g-b)/C),6));			}			else if (M == g) {								Hue = 60 * (((b-r)/C) + 2);			}			else if (M == b) {								Hue = 60 * (((r-g)/C) + 4);			}			//cout << "Hue:" << Hue << endl;			HImage[i][j] = (Hue/360.0)*255.0;			SImage[i][j] = Sat*255;			LImage[i][j] = Lum*255;		}	}	//cout << "p" << p << "q" << q << "r" << r << endl;	// Write image data (filename specified by second argument) from image data matrix	if (!(file = fopen(argv[2], "wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(HImage, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	if (!(file = fopen(argv[3], "wb"))) {		cout << "Cannot open file: " << argv[3] << endl;		exit(1);	}	fwrite(SImage, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	if (!(file = fopen(argv[4], "wb"))) {		cout << "Cannot open file: " << argv[4] << endl;		exit(1);	}	fwrite(LImage, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	return 0;}