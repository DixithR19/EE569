// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>#include <math.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size1;	int Size2;	int Size3;	int Size4;	int Size5;	int Size6;	int Size7;	int Size8;		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image1.raw output_image2.raw output_image3.raw [BytesPerPixel] [Size1] [Size2] [Size3] [Size4] [Size5] [Size6] [Size7] [Size8]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	} 	else {		BytesPerPixel = atoi(argv[5]);		// Check if size is specified		if (argc >= 5){			Size1 = atoi(argv[6]);			Size2 = atoi(argv[7]);			Size3 = atoi(argv[8]);			Size4 = atoi(argv[9]);			Size5 = atoi(argv[10]);			Size6 = atoi(argv[11]);			Size7 = atoi(argv[12]);			Size8 = atoi(argv[13]);		}	}		// Allocate image data array	unsigned char Imagedata[Size1][Size2][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	unsigned char Imagedata1[Size1][Size2][BytesPerPixel];	for (int i = 0; i < 300; i++) {		for (int j = 0; j < 300; j++) {			for (int k = 0; k < 3; k++) {				Imagedata1[i][j][k] = Imagedata[i][299 - j][k];			}		}	}	unsigned char ImageResize1[Size3][Size4][BytesPerPixel];	for (int i = 0; i < Size3; i++) {		for (int j = 0; j < Size4; j++) {			for (int k = 0; k < 3; k++) {				double p = ((double)Size1 / (double)Size3)*(double)i;				double q = ((double)Size2 / (double)Size4)*(double)j;				double x = p - floor(p);				double y = q - floor(q);				int p1 = p;				int q1 = q;								ImageResize1[i][j][k] = (1 - x)*(1 - y)*Imagedata1[p1][q1][k] + (x)*(1 - y)*Imagedata1[p1][q1 + 1][k] +					(1 - x)*(y)*Imagedata1[p1 + 1][q1][k] + (x)*(y)*Imagedata1[p1 + 1][q1 + 1][k];			}		}	}	unsigned char ImageResize2[Size5][Size6][BytesPerPixel];	for (int i = 0; i < Size5; i++) {		for (int j = 0; j < Size6; j++) {			for (int k = 0; k < 3; k++) {				double p = ((double)Size1 / (double)Size5)*(double)i;				double q = ((double)Size2 / (double)Size6)*(double)j;				double x = p - floor(p);				double y = q - floor(q);				int p1 = p;				int q1 = q;				//cout << x << "    " << y << endl;				ImageResize2[i][j][k] = (1 - x)*(1 - y)*Imagedata1[p1][q1][k] + (x)*(1 - y)*Imagedata1[p1][q1 + 1][k] +					(1 - x)*(y)*Imagedata1[p1 + 1][q1][k] + (x)*(y)*Imagedata1[p1 + 1][q1 + 1][k];			}		}	}	unsigned char ImageResize3[Size7][Size8][BytesPerPixel];	for (int i = 0; i < Size7; i++) {		for (int j = 0; j < Size8; j++) {			for (int k = 0; k < 3; k++) {				double p = ((double)Size1 / (double)Size7)*(double)i;				double q = ((double)Size2 / (double)Size8)*(double)j;				double x = p - floor(p);				double y = q - floor(q);				int p1 = p;				int q1 = q;				//cout << x << "    " << y << endl;				ImageResize3[i][j][k] = (1 - x)*(1 - y)*Imagedata1[p1][q1][k] + (x)*(1 - y)*Imagedata1[p1][q1 + 1][k] +					(1 - x)*(y)*Imagedata1[p1 + 1][q1][k] + (x)*(y)*Imagedata1[p1 + 1][q1 + 1][k];			}		}	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(ImageResize1, sizeof(unsigned char), Size3*Size4*BytesPerPixel, file);	fclose(file);	if (!(file = fopen(argv[3], "wb"))) {		cout << "Cannot open file: " << argv[3] << endl;		exit(1);	}	fwrite(ImageResize2, sizeof(unsigned char), Size5*Size6*BytesPerPixel, file);	fclose(file);	if (!(file = fopen(argv[4], "wb"))) {		cout << "Cannot open file: " << argv[4] << endl;		exit(1);	}	fwrite(ImageResize3, sizeof(unsigned char), Size7*Size8*BytesPerPixel, file);	fclose(file);	return 0;}