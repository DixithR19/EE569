// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>#include <math.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size1;	int Size2;	// Check for proper syntax	if (argc < 3) {		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel] [Size1] [Size2]" << endl;		return 0;	}	// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5) {			Size1 = atoi(argv[4]);			Size2 = atoi(argv[5]);		}	}	// Allocate image data array	unsigned char Imagedata[Size1][Size2][BytesPerPixel];	unsigned char Image[Size1][Size2][BytesPerPixel];	double nop1[256], nop2[256], nop3[256];	double sum = 0;	double pm1[256], pm2[256], pm3[256];	double cpm1[256], cpm2[256], cpm3[256];	int im1[256], im2[256], im3[256];	double temp1 = 0;	double temp2 = 0;	double temp3 = 0;	int n = 255;	// Read image (filename specified by first argument) into image data matrix	if (!(file = fopen(argv[1], "rb"))) {		cout << "Cannot open file: " << argv[1] << endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	for (int k = 0; k < 256; k++) {		int count1 = 0;		int count2 = 0;		int count3 = 0;		for (int i = 0; i < Size1; i++) {			for (int j = 0; j < Size2; j++) {				if (Imagedata[i][j][0] == k) {					count1++;				}				if (Imagedata[i][j][1] == k) {					count2++;				}				if (Imagedata[i][j][2] == k) {					count3++;				}			}		}		nop1[k] = count1;		nop2[k] = count2;		nop3[k] = count3;		sum += count1;	}	for (int k = 0; k < 256; k++) {		pm1[k] = nop1[k] / sum;		pm2[k] = nop2[k] / sum;		pm3[k] = nop3[k] / sum;		temp1 += pm1[k];		temp2 += pm2[k];		temp3 += pm3[k];		cpm1[k] = temp1;		cpm1[k] *= n;		cpm2[k] = temp2;		cpm2[k] *= n;		cpm3[k] = temp3;		cpm3[k] *= n;		im1[k] = cpm1[k];		im2[k] = cpm2[k];		im3[k] = cpm3[k];		//cout << im1[k] <<"   "<< im2[k] << "     "<< im3[k]<<endl;	}	double gaussiancpdf[256];		for (int i = 0; i < 256; i++) {		gaussiancpdf[i] = (1 / sqrt(2 * 3.14 * 400))*(exp(-(pow((i - 70), 2)) / 800));		//cout << gaussiancpdf[i] << endl;	}	double gcpm[256];	double temp4 = 0;	int dm[256];	int co[256];	int im4[256];	int im5[256];	int im6[256];	for (int k = 0; k < 256; k++) {		co[k] = k;		temp4 += gaussiancpdf[k];		if (temp4 >= 1) {			gcpm[k] = 1;		}		else {			gcpm[k] = temp4;		}		gcpm[k] *= 255;		dm[k] = gcpm[k];		//cout <<dm[k]<< endl;	}		for (int k = 0; k < 256; k++) {		int q = 0;		while (dm[q] < im1[k]) {			q++;		}		im4[k] = co[q];		int r = 0;		while (dm[r] < im2[k]) {			r++;		}		im5[k] = co[r];		int s = 0;		while (dm[s] < im3[k]) {			s++;		}		im6[k] = co[s];		//cout << im4[k]<<"."<<im1[k] <<"   "<< im5[k] <<"."<<im2[k]<<"    "<< im6[k]<<"."<<im3[k]<<"   " <<dm[k] << endl;	}	for (int k = 0; k < 256; k++) {				for (int i = 0; i < Size1; i++) {			for (int j = 0; j < Size2; j++) {				if (Imagedata[i][j][0] == k) {					Image[i][j][0]=im4[k];				}				if (Imagedata[i][j][1] == k) {					Image[i][j][1] = im5[k];				}				if (Imagedata[i][j][2] == k) {					Image[i][j][2] = im6[k];;				}			}		}			}	// Write image data (filename specified by second argument) from image data matrix	if (!(file = fopen(argv[2], "wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(Image, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	return 0;}