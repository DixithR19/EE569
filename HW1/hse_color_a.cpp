// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size1;	int Size2;	// Check for proper syntax	if (argc < 3) {		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel] [Size1] [Size2]" << endl;		return 0;	}	// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5) {			Size1 = atoi(argv[4]);			Size2 = atoi(argv[5]);		}	}	// Allocate image data array	unsigned char Imagedata[Size1][Size2][BytesPerPixel];	unsigned char Image[Size1][Size2][BytesPerPixel];	double nop1[256];	double nop2[256];	double nop3[256];	// Read image (filename specified by first argument) into image data matrix	if (!(file = fopen(argv[1], "rb"))) {		cout << "Cannot open file: " << argv[1] << endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	for (int k = 0; k < 256; k++) {		int count1 = 0;		int count2 = 0;		int count3 = 0;		for (int i = 0; i < Size1; i++) {			for (int j = 0; j < Size2; j++) {				if (Imagedata[i][j][0] == k) {					count1++;				}				if (Imagedata[i][j][1] == k) {					count2++;				}				if (Imagedata[i][j][2] == k) {					count3++;				}			}		}		nop1[k] = count1;		nop2[k] = count2;		nop3[k] = count3;			}		int fmin1, fmax1, fmin2, fmax2, fmin3, fmax3;		int gmin = 0;	int gmax = 255;	//Range of 1st Channel	int co11 = 0;	for (int k = 0; k < 256; k++) {		if (nop1[k] != 0) {			fmin1 = co11;			break;		}		co11++;	}	cout << fmin1 << endl;	int co21 = 0;	for (int k = 255; k >= 0; k--) {		if (nop1[k] != 0) {			fmax1 = 255 - co21;			break;		}		co21++;	}	cout << fmax1 << endl;	//Range of 2nd Channel	int co12 = 0;	for (int k = 0; k < 256; k++) {		if (nop2[k] != 0) {			fmin2 = co12;			break;		}		co12++;	}	cout << fmin2 << endl;	int co22 = 0;	for (int k = 255; k >= 0; k--) {		if (nop2[k] != 0) {			fmax2 = 255 - co22;			break;		}		co22++;	}	cout << fmax2 << endl;	//Range of 3rd Channel	int co13 = 0;	for (int k = 0; k < 256; k++) {		if (nop3[k] != 0) {			fmin3 = co13;			break;		}		co13++;	}	cout << fmin3 << endl;	int co23 = 0;	for (int k = 255; k >= 0; k--) {		if (nop3[k] != 0) {			fmax3 = 255 - co23;			break;		}		co23++;	}	cout << fmax3 << endl;	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			Image[i][j][0] = gmin + ((gmax - gmin) / (fmax1 - fmin1))*(Imagedata[i][j][0] - fmin1);			Image[i][j][1] = gmin + ((gmax - gmin) / (fmax2 - fmin2))*(Imagedata[i][j][1] - fmin2);			Image[i][j][2] = gmin + ((gmax - gmin) / (fmax3 - fmin3))*(Imagedata[i][j][2] - fmin3);		}	}	//cout << nop[189] << endl;	// Write image data (filename specified by second argument) from image data matrix	if (!(file = fopen(argv[2], "wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(Image, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	return 0;}