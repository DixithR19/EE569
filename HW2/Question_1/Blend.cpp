// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size1;	int Size2;	// Check for proper syntax	if (argc < 3) {		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image1.raw input_image2.raw output_image.raw [BytesPerPixel] [Size1] [Size2]" << endl;		return 0;	}	// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[4]);		// Check if size is specified		if (argc >= 5) {			Size1 = atoi(argv[5]);			Size2 = atoi(argv[6]);		}	}	// Allocate image data array	//unsigned char Imagedata1[Size1][Size2][BytesPerPixel];		// Read image (filename specified by first argument) into image data matrix	unsigned char Imagedata1[Size1][Size2][BytesPerPixel];	unsigned char Imagedata2[Size1][Size2][BytesPerPixel];	if (!(file = fopen(argv[1], "rb"))) {		cout << "Cannot open file: " << argv[1] << endl;		exit(1);	}	fread(Imagedata1, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	if (!(file = fopen(argv[2], "rb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fread(Imagedata2, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	double b,b1;	double g,g1;	double r,r1;	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			r = (double)Imagedata1[i][j][0] / 255;			g = (double)Imagedata1[i][j][1] / 255;			b = (double)Imagedata1[i][j][2] / 255;			r1 = (double)Imagedata2[i][j][0] / 255;			g1 = (double)Imagedata2[i][j][1] / 255;			b1 = (double)Imagedata2[i][j][2] / 255;						Imagedata1[i][j][0] = (1 - (1 - r)*(1 - r1))*255;			Imagedata1[i][j][1] = (1 - (1 - g)*(1 - g1))*255;			Imagedata1[i][j][2] = (1 - (1 - b)*(1 - b1))*255;		}	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file = fopen(argv[3], "wb"))) {		cout << "Cannot open file: " << argv[3] << endl;		exit(1);	}	fwrite(Imagedata1, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	return 0;}