// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>#include <math.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size1,Size2;	// Check for proper syntax	if (argc < 3) {		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name cup_1/2.raw output_image.raw [BytesPerPixel] [Size1] [Size2]" << endl;		return 0;	}	// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5) {			Size1 = atoi(argv[4]);			Size2 = atoi(argv[5]);		}	}	// Allocate image data array	unsigned char Imagedata[Size1][Size2][BytesPerPixel];	unsigned char Warp[Size1][Size2][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file = fopen(argv[1], "rb"))) {		cout << "Cannot open file: " << argv[1] << endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////		// For Triangle 1	for (int i = 0; i < Size1 / 2; i++) {		for(int j = 0; j < (i+1); j++) {			for (int k = 0; k < 3; k++) {				double q = (250.0 / (double)(i+1))*(double)j;				double y = q - floor(q);				int q1 = q;				Warp[i][j+(Size1/2-1)-i][k] = (1-y)*Imagedata[i][q1 + 1][k]+ (y)*Imagedata[i][q1][k];							}		}	}	// For Triangle 2	for (int i = 0; i < Size1 / 2; i++) {		for (int j = Size2/2; j < (Size2/2 + i + 1); j++) {			for (int k = 0; k < 3; k++) {				double q = ((250.0 / (double)(i + 1))*(double)(j- Size2 / 2 + 1))+250;				double y = q - floor(q);				int q1 = q;				Warp[i][j][k] = (1 - y)*Imagedata[i][q1 + 1][k] + (y)*Imagedata[i][q1][k];			}		}	}	// For Triangle 3	for (int i = Size1/2; i < Size1; i++) {		for (int j = 0; j < Size1-i; j++) {			for (int k = 0; k < 3; k++) {								double q = (250.0 / (double)(Size1/2+(Size1/2-i)))*(double)j;				double y = q - floor(q);				int q1 = q;				Warp[i][j+i-Size1/2][k] = (1 - y)*Imagedata[i][q1 + 1][k] + (y)*Imagedata[i][q1][k];						}		}	}		// For Triangle 4	for (int i = Size1 / 2; i < Size1; i++) {		for (int j = Size2 / 2; j < Size2 - (i - Size1 / 2); j++) {			for(int k = 0; k < 3; k++) {				double q = (250.0 / (double)(Size1/2-(i-Size1/2))*(double)(j - Size2 / 2)) + 250;				double y = q - floor(q);				int q1 = q;				Warp[i][j][k] = (1 - y)*Imagedata[i][q1 + 1][k] + (y)*Imagedata[i][q1][k];			}		}	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file = fopen(argv[2], "wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(Warp, sizeof(unsigned char), Size1*Size2*BytesPerPixel, file);	fclose(file);	return 0;}