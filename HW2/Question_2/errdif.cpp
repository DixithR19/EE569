// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size1;	int Size2;	double FS[3][3] = { {0,0,0},{0,0,7.0/16},{3.0/16,5.0/16,1.0/16} };	double JJN[5][5] = { {0,0,0,0,0},{0,0,0,0,0},{0,0,0,7.0 / 48,5.0 / 48},{3.0 / 48,5.0 / 48,7.0 / 48,5.0 / 48,3.0 / 48},{1.0 / 48,3.0 / 48,5.0 / 48,3.0 / 48,1.0 / 48} };	double Stucki[5][5] = { {0,0,0,0,0},{0,0,0,0,0},{0,0,0,8.0 / 42,4.0 / 42},{2.0 / 42,4.0 / 42,8.0 / 42,4.0 / 42,2.0 / 42},{1.0 / 42,2.0 / 42,4.0 / 42,2.0 / 42,1.0 / 42} };		// Check for proper syntax	if (argc < 3) {		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw FS.raw JJN.raw Stucki.raw [BytesPerPixel] [Size1] [Size2]" << endl;		return 0;	}	// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[5]);		// Check if size is specified		if (argc >= 5) {			Size1 = atoi(argv[6]);			Size2 = atoi(argv[7]);		}	}	// Allocate image data array	unsigned char Imagedata[Size1][Size2];	unsigned char ImageO[Size1][Size2];	unsigned char ImageExtend3[Size1 + 2][Size2 + 2];	unsigned char ImageExtend5[Size1 + 4][Size2 + 4];	// Read image (filename specified by first argument) into image data matrix	if (!(file = fopen(argv[1], "rb"))) {		cout << "Cannot open file: " << argv[1] << endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Size1*Size2, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			ImageExtend3[i + 1][j + 1] = Imagedata[i][j];			ImageExtend5[i + 2][j + 2] = Imagedata[i][j];		}	}	for (int j = 0; j < Size2; j++) {		ImageExtend3[0][j + 1] = Imagedata[0][j];		ImageExtend5[0][j + 2] = Imagedata[0][j];		ImageExtend5[1][j + 2] = Imagedata[0][j];		ImageExtend3[Size1+1][j + 1] = Imagedata[Size1-1][j];		ImageExtend5[Size1+2][j + 2] = Imagedata[Size1-1][j];		ImageExtend5[Size1+3][j + 2] = Imagedata[Size1-1][j];	}	for (int i = 0; i < (Size1 + 4); i++) {		ImageExtend5[i][0] = ImageExtend5[i][2];		ImageExtend5[i][1] = ImageExtend5[i][2];		ImageExtend5[i][Size2 + 2] = ImageExtend5[i][Size2 + 1];		ImageExtend5[i][Size2 + 3] = ImageExtend5[i][Size2 + 1];	}	for (int i = 0; i < (Size1 + 2); i++) {		ImageExtend3[i][0] = ImageExtend3[i][1];		ImageExtend3[i][Size2 + 1] = ImageExtend3[i][Size2];	}	double old_pixel;	double new_pixel;	double quant_error;	// FS	for (int i = 1; i <= Size1; i++) {		for (int j = 1; j <= Size2; j++) {						old_pixel = (double)ImageExtend3[i][j];						if (old_pixel>127) {				new_pixel = 255;			}			else {				new_pixel = 0;			}						quant_error = old_pixel - new_pixel;						ImageExtend3[i][j] = new_pixel;						ImageExtend3[i][j + 1] = (double)ImageExtend3[i][j + 1] + quant_error*FS[1][2];			ImageExtend3[i + 1][j - 1] = (double)ImageExtend3[i + 1][j - 1] + quant_error*FS[2][0];			ImageExtend3[i + 1][j + 1] = (double)ImageExtend3[i + 1][j + 1] + quant_error*FS[2][2];			ImageExtend3[i + 1][j] = (double)ImageExtend3[i + 1][j] + quant_error*FS[2][1];		}	}	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			ImageO[i][j] = ImageExtend3[i + 1][j + 1];		}	}	if (!(file = fopen(argv[2], "wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(ImageO, sizeof(unsigned char), (Size1)*(Size2), file);	fclose(file);	// JJN	for (int i = 2; i <= (Size1+1); i++) {		for (int j = 2; j <= (Size2+1); j++) {			old_pixel = (double)ImageExtend5[i][j];			if (old_pixel>127) {				new_pixel = 255;			}			else {				new_pixel = 0;			}			quant_error = old_pixel - new_pixel;			ImageExtend5[i][j] = new_pixel;			ImageExtend5[i][j + 1] = (double)ImageExtend5[i][j + 1] + quant_error*JJN[2][3];			ImageExtend5[i][j + 2] = (double)ImageExtend5[i][j + 2] + quant_error*JJN[2][4];			ImageExtend5[i + 1][j - 2] = (double)ImageExtend5[i + 1][j - 2] + quant_error*JJN[3][0];			ImageExtend5[i + 1][j - 1] = (double)ImageExtend5[i + 1][j - 1] + quant_error*JJN[3][1];			ImageExtend5[i + 1][j] = (double)ImageExtend5[i + 1][j] + quant_error*JJN[3][2];			ImageExtend5[i + 1][j + 1] = (double)ImageExtend5[i + 1][j + 1] + quant_error*JJN[3][3];			ImageExtend5[i + 1][j + 2] = (double)ImageExtend5[i + 1][j + 2] + quant_error*JJN[3][4];			ImageExtend5[i + 2][j - 2] = (double)ImageExtend5[i + 2][j - 2] + quant_error*JJN[4][0];			ImageExtend5[i + 2][j - 1] = (double)ImageExtend5[i + 2][j - 1] + quant_error*JJN[4][1];			ImageExtend5[i + 2][j] = (double)ImageExtend5[i + 2][j] + quant_error*JJN[4][2];			ImageExtend5[i + 2][j + 1] = (double)ImageExtend5[i + 2][j + 1] + quant_error*JJN[4][3];			ImageExtend5[i + 2][j + 2] = (double)ImageExtend5[i + 2][j + 2] + quant_error*JJN[4][4];		}	}		for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			ImageO[i][j] = ImageExtend5[i + 2][j + 2];		}	}	if (!(file = fopen(argv[3], "wb"))) {		cout << "Cannot open file: " << argv[3] << endl;		exit(1);	}	fwrite(ImageO, sizeof(unsigned char), (Size1)*(Size2), file);	fclose(file);	// Rewriting Image again	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			ImageExtend3[i + 1][j + 1] = Imagedata[i][j];			ImageExtend5[i + 2][j + 2] = Imagedata[i][j];		}	}	for (int j = 0; j < Size2; j++) {		ImageExtend3[0][j + 1] = Imagedata[0][j];		ImageExtend5[0][j + 2] = Imagedata[0][j];		ImageExtend5[1][j + 2] = Imagedata[0][j];		ImageExtend3[Size1 + 1][j + 1] = Imagedata[Size1 - 1][j];		ImageExtend5[Size1 + 2][j + 2] = Imagedata[Size1 - 1][j];		ImageExtend5[Size1 + 3][j + 2] = Imagedata[Size1 - 1][j];	}	for (int i = 0; i < (Size1 + 4); i++) {		ImageExtend5[i][0] = ImageExtend5[i][2];		ImageExtend5[i][1] = ImageExtend5[i][2];		ImageExtend5[i][Size2 + 2] = ImageExtend5[i][Size2 + 1];		ImageExtend5[i][Size2 + 3] = ImageExtend5[i][Size2 + 1];	}	for (int i = 0; i < (Size1 + 2); i++) {		ImageExtend3[i][0] = ImageExtend3[i][1];		ImageExtend3[i][Size2 + 1] = ImageExtend3[i][Size2];	}	// Stucki	for (int i = 2; i <= (Size1 + 1); i++) {		for (int j = 2; j <= (Size2 + 1); j++) {			old_pixel = (double)ImageExtend5[i][j];			if (old_pixel>127) {				new_pixel = 255;			}			else {				new_pixel = 0;			}			quant_error = old_pixel - new_pixel;			ImageExtend5[i][j] = new_pixel;			ImageExtend5[i][j + 1] = (double)ImageExtend5[i][j + 1] + quant_error*Stucki[2][3];			ImageExtend5[i][j + 2] = (double)ImageExtend5[i][j + 2] + quant_error*Stucki[2][4];			ImageExtend5[i + 1][j - 2] = (double)ImageExtend5[i + 1][j - 2] + quant_error*Stucki[3][0];			ImageExtend5[i + 1][j - 1] = (double)ImageExtend5[i + 1][j - 1] + quant_error*Stucki[3][1];			ImageExtend5[i + 1][j] = (double)ImageExtend5[i + 1][j] + quant_error*Stucki[3][2];			ImageExtend5[i + 1][j + 1] = (double)ImageExtend5[i + 1][j + 1] + quant_error*Stucki[3][3];			ImageExtend5[i + 1][j + 2] = (double)ImageExtend5[i + 1][j + 2] + quant_error*Stucki[3][4];			ImageExtend5[i + 2][j - 2] = (double)ImageExtend5[i + 2][j - 2] + quant_error*Stucki[4][0];			ImageExtend5[i + 2][j - 1] = (double)ImageExtend5[i + 2][j - 1] + quant_error*Stucki[4][1];			ImageExtend5[i + 2][j] = (double)ImageExtend5[i + 2][j] + quant_error*Stucki[4][2];			ImageExtend5[i + 2][j + 1] = (double)ImageExtend5[i + 2][j + 1] + quant_error*Stucki[4][3];			ImageExtend5[i + 2][j + 2] = (double)ImageExtend5[i + 2][j + 2] + quant_error*Stucki[4][4];		}	}	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			ImageO[i][j] = ImageExtend5[i + 2][j + 2];		}	}	if (!(file = fopen(argv[4], "wb"))) {		cout << "Cannot open file: " << argv[4] << endl;		exit(1);	}	fwrite(ImageO, sizeof(unsigned char), (Size1)*(Size2), file);	fclose(file);	// Improvement	double FS1[3][3] = { { 1.0 / 16,3.0 / 16,5.0 / 16 },{ 7.0 / 16, 0 ,0 },{ 0,0,0 } };	double o1, o2, o3, o4, n1, n2, n3, n4;	for (int i = 1; i <= Size1; i++) {		for (int j = 1; j <= Size2; j++) {			o1 = ImageExtend3[i - 1][j - 1];			if (o1 < 100) {				n1 = 0;			}			else {				n1 = 255;			}			o2 = ImageExtend3[i - 1][j];			if (o2 < 100) {				n2 = 0;			}			else {				n2 = 255;			}			o3 = ImageExtend3[i - 1][j + 1];			if (o3 < 100) {				n3 = 0;			}			else {				n3 = 255;			}			o4 = ImageExtend3[i][j - 1];			if (o4 < 100) {				n4 = 0;			}			else {				n4 = 255;			}			double val = ImageExtend3[i][j] + (o1 - n1)*FS1[0][0] + (o2 - n2)*FS1[0][1] + (o3 - n3)*FS1[0][2] + (o4 - n4)*FS1[1][0];			if (val < 105) {				ImageExtend3[i][j] = 0;			}			else {				ImageExtend3[i][j] = 255;			}		}	}	for (int i = 0; i < Size1; i++) {		for (int j = 0; j < Size2; j++) {			ImageO[i][j] = ImageExtend3[i + 1][j + 1];		}	}	if (!(file = fopen("Improved.raw", "wb"))) {		cout << "Cannot open file: " << "Improved.raw" << endl;		exit(1);	}	fwrite(ImageO, sizeof(unsigned char), (Size1)*(Size2), file);	fclose(file);	return 0;}