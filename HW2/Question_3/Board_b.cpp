// This sample code reads in image data from a RAW image file and 
// writes it into another file

// NOTE:	The code assumes that the image is of size 256 x 256 and is in the
//			RAW format. You will need to make corresponding changes to
//			accommodate images of different sizes and/or types

#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <math.h>

using namespace std;
void floodfill(unsigned char** ,int x, int y, int color);
unsigned char dummy[480][480];
unsigned char Imagedata1[480][480];
unsigned char Imagedata[480][480];
void shrink1(unsigned char** Imagedata, int Size1, int Size2);
int main(int argc, char *argv[])

{

	

	// Define file pointer and variables
	FILE *file;
	int BytesPerPixel;
	int Size1, Size2;

	// Check for proper syntax
	if (argc < 3) {
		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;
		cout << "program_name input_image.raw output_image.raw [BytesPerPixel] [Size1] [Size2]" << endl;
		return 0;
	}

	// Check if image is grayscale or color
	if (argc < 4) {
		BytesPerPixel = 1; // default is grey image
	}
	else {
		BytesPerPixel = atoi(argv[3]);
		// Check if size is specified
		if (argc >= 5) {
			Size1 = atoi(argv[4]);
			Size2 = atoi(argv[5]);
		}
	}

	// Allocate image data array
	unsigned char ** img = (unsigned char**)malloc(Size1 * sizeof(unsigned char*));
	for (int i = 0; i < Size2; i++)
		img[i] = (unsigned char*)malloc(Size2 * sizeof(unsigned char));
	

	// Read image (filename specified by first argument) into image data matrix
	if (!(file = fopen(argv[1], "rb"))) {
		cout << "Cannot open file: " << argv[1] << endl;
		exit(1);
	}
	fread(Imagedata1, sizeof(unsigned char), Size1*Size2, file);
	fclose(file);

	for (int i = 0; i < Size1; i++) {
		for (int j = 0; j < Size2; j++) {
			if (Imagedata1[i][j] == 255) {
				Imagedata[i][j] = 0;
			}
			else {
				Imagedata[i][j] = 255;
			}
		}
	}




	unsigned char M[Size1][Size2];
	unsigned char F[Size1][Size2];
	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////
	string Shrink[58] = { "001010000","100010000","000010100","000010001","000011000","010010000","000110000","000010010",
		"001011000","011010000","110010000","100110000","000110100","000010110","000010011","000011001","001011001",
		"111010000","100110100","000010111","110011000","010011001","011110000","001011010","011011000","110110000",
		"000110110","000011011","110011001","011110100","111011000","011011001","111110000","110110100","100110110",
		"000110111","000011111","001011011","111011001","111110100","100110111","001011111","011011011","111111000",
		"110110110","000111111","111011011","011011111","111111100","111111001","111110110","110110111","100111111",
		"001111111","111011111","111111101","111110111","101111111" };

	string UShrink[364] = { "001010000","100010000","000010010","000011000","001011000","011010000","110010000","100110000","000110100",
		"000010110","000010011","000011001","011110000","110011000","010011001","001011010","001011100","011010100","011011100",
		"110010001","100110001","110110001","001010110","001110100","001110110","100011001","100010011","100011011","110110000",
		"110110001","110111000","110111001","111110000","111110001","111111000","111111001","110110010","110110011","110111010",
		"110111011","111110010","111110011","111111010","111111011","110110100","110110101","110111100","110111101","111110100",
		"111110101","111111100","111111101","110110110","110110111","110111110","110111111","111110110","111110111","111111110",
		"111111111","010110010","011110010","110110010","111110010","010110010","010110011","010110110","010110111","010011010",
		"010011011","010011110","010011111","010011010","011011010","110011010","111011010","010111000","010111100","110111000",
		"110111100","010111000","010111001","011111000","011111001","000111010","000111011","001111010","001111011","000111010",
		"000111110","100111010","100111110","100010101","100011100","100011101","101010100","101010101","101011100","101011101",
		"100010111","100011110","100011111","101010110","101010111","101011110","101011111","110010101","110011100","110011101",
		"111010100","111010101","111011100","111011101","110010111","110011110","110011111","111010110","111010111","111011110",
		"111011111","100110101","100111100","100111101","101110100","101110101","101111100","101111101","100110111","100111110",
		"100111111","101110110","101110111","101111110","101111111","110110101","110111100","110111101","111110100","111110101",
		"111111100","111111101","110110111","110111110","110111111","111110110","111110111","111111110","111111111","101010100",
		"101010010","101010110","101010001","101010101","101010011","101010111","101011100","101011010","101011110","101011001",
		"101011101","101011011","101011111","111010100","111010010","111010110","111010001","111010101","111010011","111010111",
		"111011100","111011010","111011110","111011001","111011101","111011011","111011111","101110100","101110010","101110110",
		"101110001","101110101","101110011","101110111","101111100","101111010","101111110","101111001","101111101","101111011",
		"101111111","111110100","111110010","111110110","111110001","111110101","111110011","111110111","111111100","111111010",
		"111111110","111111001","111111101","111111011","111111111","001010101","001110001","001110101","101010001","101010101",
		"101110001","101110101","001011101","001111001","001111101","101011001","101011101","101111001","101111101","001010111",
		"001110011","001110111","101010011","101010111","101110011","101110111","001011111","001111011","001111111","101011011",
		"101011111","101111011","101111111","011010101","011110001","011110101","111010001","111010101","111110001","111110101",
		"011011101","011111001","011111101","111011001","111011101","111111001","111111101","011010111","011110011","011110111",
		"111010011","111010111","111110011","111110111","011011111","011111011","011111111","111011011","111011111","111111011",
		"111111111","001010101","010010101","011010101","100010101","101010101","110010101","111010101","001011101","010011101",
		"011011101","100011101","101011101","110011101","111011101","001010111","010010111","011010111","100010111","101010111",
		"110010111","111010111","001011111","010011111","011011111","100011111","101011111","110011111","111011111","001110101",
		"010110101","011110101","100110101","101110101","110110101","111110101","001111101","010111101","011111101","100111101",
		"101111101","110111101","111111101","001110111","010110111","011110111","100110111","101110111","110110111","111110111",
		"001111111","010111111","011111111","100111111","101111111","110111111","111111111","001110010","001110011","101110010",
		"101110011","010110001","011110001","010110101","011110101","010011100","010011101","110011100","110011101","100011010",
		"101011010","100011110","101011110","110110000","110110001","110111000","110111001","111110000","111110001","111111000",
		"111111001","110110010","110110011","110111010","110111011","111110010","111110011","111111010","111111011","110110100",
		"110110101","110111100","110111101","111110100","111110101","111111100","111111101","110110110","110110111","110111110",
		"110111111","111110110","111110111","111111110","111111111" };
	int SC = 3;
	int CC = -3;
	for (int k = 0; k < 200; k++) {
		for (int i = 0; i < Size1; i++) {
			for (int j = 0; j < Size2; j++) {
				Imagedata[i][j] = Imagedata[i][j] / 255;
			}
		}
		int X0, X1, X2, X3, X4, X5, X6, X7;
		for (int i = 1; i < Size1 - 20; i++) {
			for (int j = 1; j < Size2 - 20; j++) {
				if (Imagedata[i][j] == 0) {
					M[i][j] = 0;
				}
				else {
					X0 = Imagedata[i - 1][j - 1];
					X1 = Imagedata[i - 1][j];
					X2 = Imagedata[i - 1][j + 1];
					X3 = Imagedata[i][j + 1];
					X4 = Imagedata[i + 1][j + 1];
					X5 = Imagedata[i + 1][j];
					X6 = Imagedata[i + 1][j - 1];
					X7 = Imagedata[i][j - 1];
					int Bond = 2 * (X1 + X3 + X5 + X7) + 1 * (X0 + X2 + X4 + X6);
					if (Bond == 0 || Bond == 12) {
						M[i][j] = 0;
					}
					else {
						string s;
						int count = 0;

						for (int k = i - 1; k <= i + 1; k++) {
							for (int l = j - 1; l <= j + 1; l++) {
								if ((int)Imagedata[k][l])
									s.append("1");
								else
									s.append("0");
							}
						}
						for (int c = 0; c < 58; c++) {
							if (s == Shrink[c]) {
								count += 1;
							}
						}
						if (count == 0) {
							M[i][j] = 0;
						}
						else {
							M[i][j] = 1;
						}

					}
				}
			}
		}

		// Second lookup table

		for (int i = 1; i < Size1 - 1; i++) {
			for (int j = 1; j < Size2 - 1; j++) {
				if (M[i][j] == 0) {
					F[i][j] = Imagedata[i][j];
				}
				else {
					string s;
					int count = 0;
					for (int k = i - 1; k <= i + 1; k++) {
						for (int l = j - 1; l <= j + 1; l++) {
							if ((int)M[k][l])
								s.append("1");
							else
								s.append("0");
						}
					}
					for (int c = 0; c < 364; c++) {
						if (s == UShrink[c]) {
							count += 1;
						}
					}
					if (count == 0) {
						F[i][j] = 0;
					}
					else {
						F[i][j] = Imagedata[i][j];
					}
				}
				F[i][j] = F[i][j] * 255;
				Imagedata[i][j] = F[i][j];
			}
		}

	}
	
	int count;
	int F0, F1, F2, F3, F4, F5, F6, F7;
	for (int i = 0; i < Size1; i++) {
		for (int j = 0; j < Size2; j++) {
			F0 = F[i - 1][j];
			F1 = F[i + 1][j];
			F2 = F[i][j - 1];
			F3 = F[i][j + 1];
			F4 = F[i - 1][j - 1];
			F5 = F[i + 1][j + 1];
			F6 = F[i + 1][j - 1];
			F7 = F[i - 1][j + 1];
			if (F[i][j] == 255 && F0 == 0 && F1 == 0 && F2 == 0 && F3 == 0 && F4 == 0 && F5 == 0 && F6 == 0 && F7 == 0) {
					count++;
					dummy[i][j] = 255;
			}
			else {
				dummy[i][j] = 0;
			}
			
		}
	}



	if (!(file = fopen("no_of_holes.raw", "wb"))) {		cout << "Cannot open file: " << "no_of_holes.raw" << endl;		exit(1);	}	fwrite(dummy, sizeof(unsigned char), (Size1)*(Size2), file);	fclose(file);

	for (int i = 0; i < 480; i++)
		for (int j = 0; j < 480; j++)
			img[i][j] = Imagedata1[i][j];
		
	cout << "Number of Holes:"<<count << endl;
	cout << "Coordinates for Flood Fill" << endl;
	for (int i = 0; i < Size1; i++) {
		for (int j = 0; j < Size2; j++) {
			if (dummy[i][j] == 255) {
				cout <<"Row:"<< i << ", Column:" << j << endl;
				floodfill(img,i, j, 255);
			}
		}
	}

	if (!(file = fopen("flooded.raw", "wb"))) {
		cout << "Cannot open file: " << "flooded.raw" << endl;
		exit(1);
	}

	for (int j = 0; j<480; j++)
		fwrite(img[j], sizeof(unsigned char), Size2, file);
	fclose(file);



	unsigned char copy[480][480];
	for (int i = 0; i < Size1; i++) {
		for (int j = 0; j < Size2; j++) {
			copy[i][j] = img[i][j];
		}
	}

	shrink1(img, 480, 480);

	if (!(file = fopen("no_of_white_objects.raw", "wb"))) {
		cout << "Cannot open file: " << "no_of_white_objects.raw" << endl;
		exit(1);
	}

	for (int j = 0; j<480; j++)
		fwrite(img[j], sizeof(unsigned char), Size2, file);
	fclose(file);

	// Finding Squares and Circles
	int c1, c2, c3, c4;
	
	int istart, jstart;
	cout << "Coordinates for White Objects" << endl;
	for (int i = 0; i < Size1; i++) {
		for (int j = 0; j < Size2; j++) {
			if (img[i][j] == 255) 
			{
				cout << "Row:" << i << ", Column:" << j << endl;
				jstart = j;
				while (copy[i][jstart] != 0) {
					jstart++;
					c1++;
				}
				jstart = j;
				while (copy[i][jstart] != 0) {
					jstart--;
					c2++;
				}
				jstart = j;
				istart = i;
				while (copy[istart][j] != 0) {
					istart++;
					c3++;
				}
				istart = i;
				while (copy[istart][j] != 0) {
					istart--;
					c4++;
				}
				
				if ((c1 == c2)) {
					SC++;
				}
				else {
					CC++;
				}





			}
		}
	}


	cout << "Number of Squares:" << SC << endl << "Number of Circles:" << CC << endl;
	
	return 0;
}



void floodfill(unsigned char** Imagedata, int x, int y, int color) {
	if (Imagedata[x][y] != color) {
		Imagedata[x][y] = color;
		floodfill(Imagedata,x - 1, y, color);
		floodfill(Imagedata,x + 1, y, color);
		floodfill(Imagedata, x, y - 1, color);
		floodfill(Imagedata, x, y + 1, color);

	}
}




void shrink1(unsigned char** Imagedata,int Size1, int Size2)
{
	unsigned char M[Size1][Size2];
	unsigned char F[Size1][Size2];
	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////
	string Shrink[58] = { "001010000","100010000","000010100","000010001","000011000","010010000","000110000","000010010",
		"001011000","011010000","110010000","100110000","000110100","000010110","000010011","000011001","001011001",
		"111010000","100110100","000010111","110011000","010011001","011110000","001011010","011011000","110110000",
		"000110110","000011011","110011001","011110100","111011000","011011001","111110000","110110100","100110110",
		"000110111","000011111","001011011","111011001","111110100","100110111","001011111","011011011","111111000",
		"110110110","000111111","111011011","011011111","111111100","111111001","111110110","110110111","100111111",
		"001111111","111011111","111111101","111110111","101111111" };

	string UShrink[364] = { "001010000","100010000","000010010","000011000","001011000","011010000","110010000","100110000","000110100",
		"000010110","000010011","000011001","011110000","110011000","010011001","001011010","001011100","011010100","011011100",
		"110010001","100110001","110110001","001010110","001110100","001110110","100011001","100010011","100011011","110110000",
		"110110001","110111000","110111001","111110000","111110001","111111000","111111001","110110010","110110011","110111010",
		"110111011","111110010","111110011","111111010","111111011","110110100","110110101","110111100","110111101","111110100",
		"111110101","111111100","111111101","110110110","110110111","110111110","110111111","111110110","111110111","111111110",
		"111111111","010110010","011110010","110110010","111110010","010110010","010110011","010110110","010110111","010011010",
		"010011011","010011110","010011111","010011010","011011010","110011010","111011010","010111000","010111100","110111000",
		"110111100","010111000","010111001","011111000","011111001","000111010","000111011","001111010","001111011","000111010",
		"000111110","100111010","100111110","100010101","100011100","100011101","101010100","101010101","101011100","101011101",
		"100010111","100011110","100011111","101010110","101010111","101011110","101011111","110010101","110011100","110011101",
		"111010100","111010101","111011100","111011101","110010111","110011110","110011111","111010110","111010111","111011110",
		"111011111","100110101","100111100","100111101","101110100","101110101","101111100","101111101","100110111","100111110",
		"100111111","101110110","101110111","101111110","101111111","110110101","110111100","110111101","111110100","111110101",
		"111111100","111111101","110110111","110111110","110111111","111110110","111110111","111111110","111111111","101010100",
		"101010010","101010110","101010001","101010101","101010011","101010111","101011100","101011010","101011110","101011001",
		"101011101","101011011","101011111","111010100","111010010","111010110","111010001","111010101","111010011","111010111",
		"111011100","111011010","111011110","111011001","111011101","111011011","111011111","101110100","101110010","101110110",
		"101110001","101110101","101110011","101110111","101111100","101111010","101111110","101111001","101111101","101111011",
		"101111111","111110100","111110010","111110110","111110001","111110101","111110011","111110111","111111100","111111010",
		"111111110","111111001","111111101","111111011","111111111","001010101","001110001","001110101","101010001","101010101",
		"101110001","101110101","001011101","001111001","001111101","101011001","101011101","101111001","101111101","001010111",
		"001110011","001110111","101010011","101010111","101110011","101110111","001011111","001111011","001111111","101011011",
		"101011111","101111011","101111111","011010101","011110001","011110101","111010001","111010101","111110001","111110101",
		"011011101","011111001","011111101","111011001","111011101","111111001","111111101","011010111","011110011","011110111",
		"111010011","111010111","111110011","111110111","011011111","011111011","011111111","111011011","111011111","111111011",
		"111111111","001010101","010010101","011010101","100010101","101010101","110010101","111010101","001011101","010011101",
		"011011101","100011101","101011101","110011101","111011101","001010111","010010111","011010111","100010111","101010111",
		"110010111","111010111","001011111","010011111","011011111","100011111","101011111","110011111","111011111","001110101",
		"010110101","011110101","100110101","101110101","110110101","111110101","001111101","010111101","011111101","100111101",
		"101111101","110111101","111111101","001110111","010110111","011110111","100110111","101110111","110110111","111110111",
		"001111111","010111111","011111111","100111111","101111111","110111111","111111111","001110010","001110011","101110010",
		"101110011","010110001","011110001","010110101","011110101","010011100","010011101","110011100","110011101","100011010",
		"101011010","100011110","101011110","110110000","110110001","110111000","110111001","111110000","111110001","111111000",
		"111111001","110110010","110110011","110111010","110111011","111110010","111110011","111111010","111111011","110110100",
		"110110101","110111100","110111101","111110100","111110101","111111100","111111101","110110110","110110111","110111110",
		"110111111","111110110","111110111","111111110","111111111" };
	for (int k = 0; k < 200; k++) {
		for (int i = 0; i < Size1; i++) {
			for (int j = 0; j < Size2; j++) {
				Imagedata[i][j] = Imagedata[i][j] / 255;
			}
		}
		int X0, X1, X2, X3, X4, X5, X6, X7;
		for (int i = 1; i < Size1 - 1; i++) {
			for (int j = 1; j < Size2 - 1; j++) {
				if (Imagedata[i][j] == 0) {
					M[i][j] = 0;
				}
				else {
					X0 = Imagedata[i - 1][j - 1];
					X1 = Imagedata[i - 1][j];
					X2 = Imagedata[i - 1][j + 1];
					X3 = Imagedata[i][j + 1];
					X4 = Imagedata[i + 1][j + 1];
					X5 = Imagedata[i + 1][j];
					X6 = Imagedata[i + 1][j - 1];
					X7 = Imagedata[i][j - 1];
					int Bond = 2 * (X1 + X3 + X5 + X7) + 1 * (X0 + X2 + X4 + X6);
					if (Bond == 0 || Bond == 12) {
						M[i][j] = 0;
					}
					else {
						string s;
						int count = 0;

						for (int k = i - 1; k <= i + 1; k++) {
							for (int l = j - 1; l <= j + 1; l++) {
								if ((int)Imagedata[k][l])
									s.append("1");
								else
									s.append("0");
							}
						}
						for (int c = 0; c < 58; c++) {
							if (s == Shrink[c]) {
								count += 1;
							}
						}
						if (count == 0) {
							M[i][j] = 0;
						}
						else {
							M[i][j] = 1;
						}

					}
				}
			}
		}

		// Second lookup table

		for (int i = 1; i < Size1 - 1; i++) {
			for (int j = 1; j < Size2 - 1; j++) {
				if (M[i][j] == 0) {
					F[i][j] = Imagedata[i][j];
				}
				else {
					string s;
					int count = 0;
					for (int k = i - 1; k <= i + 1; k++) {
						for (int l = j - 1; l <= j + 1; l++) {
							if ((int)M[k][l])
								s.append("1");
							else
								s.append("0");
						}
					}
					for (int c = 0; c < 364; c++) {
						if (s == UShrink[c]) {
							count += 1;
						}
					}
					if (count == 0) {
						F[i][j] = 0;
					}
					else {
						F[i][j] = Imagedata[i][j];
					}
				}
				F[i][j] = F[i][j] * 255;
				Imagedata[i][j] = F[i][j];
			}
		}

	}
	int count = 0;
	for (int i = 0; i < Size1; i++) {
		for (int j = 0; j < Size2; j++) {
			if (F[i][j] == 255) {
				count++;
			}
		}
	}
	cout << "Number of White Objects:" << count << endl;
}

